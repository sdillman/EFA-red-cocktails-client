{"version":3,"sources":["common/environment.tsx","components/auth/Signup.tsx","components/auth/Login.tsx","components/auth/ValidateSession.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["APIURL","window","location","hostname","Signup","props","handleSignup","a","fetch","method","body","JSON","stringify","user","email","state","password","role","headers","Headers","then","response","json","data","alert","message","sessionToken","updateToken","className","Form","onSubmit","this","FormGroup","Label","htmlFor","Input","name","placeholder","type","required","onChange","e","setState","target","value","minLength","Button","React","Component","Login","event","preventDefault","res","catch","error","console","log","handleSubmit","onClick","ValidateSession","Container","Row","Col","md","App","setToken","localStorage","getItem","newToken","setItem","removeItem","token","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.063ec88b.chunk.js","sourcesContent":["let APIURL: string = '';\r\n\r\nswitch (window.location.hostname) {\r\n    //this is the local host name for react app\r\n    case 'localhost' || '127.0.0.1':\r\n        //this is the local host name of your API\r\n        APIURL = 'http://localhost:3000';\r\n        break;\r\n    //this is the depoloyed react app - model from blue badge project\r\n    // case 'listo-sre.herokuapp.com' :\r\n    // APIURL = 'https://listo-efa.herokuapp.com'\r\n}\r\n\r\nexport default APIURL;\r\n","import React from 'react';\r\nimport ValidateSession from './ValidateSession';\r\nimport { Form, FormGroup, Label, Input, Button } from 'reactstrap';\r\nimport APIURL from '../../common/environment';\r\n\r\ninterface SignupState {\r\n    email: string;\r\n    password: string;\r\n    role: string;\r\n}\r\n\r\ninterface SignupProps {\r\n    updateToken: (newToken: string) => void;\r\n}\r\n\r\n// Login and signup forms contain the same info, but differ in their titles and the action they initiate with server when a successful user account is made.\r\n\r\n/**\r\n * Renders a form for user signup.\r\n */\r\nclass Signup extends React.Component<SignupProps, SignupState> {\r\n    constructor(props: SignupProps) {\r\n      super(props);\r\n      this.state = {\r\n        email: '',\r\n        password: '',\r\n        role: \"user\"\r\n      }\r\n    };\r\n  \r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    handleSignup = async() =>  {\r\n        await fetch(`${APIURL}/user/signup`, {\r\n            method: \"POST\", \r\n            body: JSON.stringify({\r\n                user: { \r\n                    email: this.state.email, \r\n                    password: this.state.password,\r\n                    role: \"user\"\r\n                } \r\n            }),\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\"\r\n            })\r\n        })\r\n        .then((response) => response.json())\r\n        .then((data) =>\r\n        {\r\n            //display to user the server's response\r\n            //then update the token\r\n            window.alert(data.message);\r\n            //takes the session token from the response and passes it to the updatetoken object IF a sessionToken exists\r\n            if (data.sessionToken) {\r\n            //we can do this bc updateToken is defined in app.js\r\n                this.props.updateToken(data.sessionToken)\r\n            }\r\n        })\r\n    };\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>Create Account</h1>\r\n                <Form onSubmit = {this.handleSignup}>\r\n                    <FormGroup>\r\n                        <Label\r\n                            className=\"form-label\"\r\n                            htmlFor=\"email\">Email</Label>\r\n                        <Input\r\n                            name=\"email\"\r\n                            placeholder=\"cheers@youremail.com\"\r\n                            type=\"email\"\r\n                            aria-required=\"true\"\r\n                            required={true}\r\n                            //target is the target element of the event-in this case, the input\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => this.setState({ email: e.target.value })}\r\n                            value={this.state.email}\r\n                        />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label\r\n                            className=\"form-label\"\r\n                            htmlFor=\"password\">Password</Label>\r\n                        <Input\r\n                            placeholder=\"make it strong and 6 characters or more\"\r\n                            type=\"text\"\r\n                            name=\"password\"\r\n                            aria-required=\"true\"\r\n                            required={true}\r\n                            minLength={6}\r\n\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => this.setState({ password: e.target.value })}\r\n                            value={this.state.password} />\r\n                        \r\n                    </FormGroup>\r\n                    <br>\r\n                    </br>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        className=\"btn-auth\"\r\n                    > Sign Up </Button>\r\n                </Form>\r\n                <br>\r\n                </br>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default Signup;\r\n","import React from 'react';\r\nimport { Form, FormGroup, Label, Input, Button } from 'reactstrap';\r\nimport APIURL from '../../common/environment';\r\n\r\ninterface LoginState {\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\ninterface LoginProps {\r\n    updateToken: (newToken: string) => void;\r\n}\r\n\r\n/**\r\n * Renders a form for user login.\r\n */\r\n class Login extends React.Component<LoginProps, LoginState> {\r\n    constructor(props: LoginProps) {\r\n      super(props);\r\n      this.state = {\r\n        email: '',\r\n        password: ''\r\n      }\r\n    };\r\n    \r\n    async handleSubmit(event :any) {\r\n        event.preventDefault();\r\n\r\n        //if (username !== \" \" && password !== \" \") {\r\n        await fetch(`${APIURL}/user/login`, {\r\n            method: \"POST\",\r\n            body: JSON.stringify({ user: { email: this.state.email, password: this.state.password } }),\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\"\r\n            })\r\n        })\r\n            .then((res) => res.json())\r\n            // takes the session token from the response and passes it to the updatetoken object\r\n            .then((data) => {\r\n                //displays what message the server has programmed\r\n                window.alert(data.message);\r\n\r\n                if (data.sessionToken) {\r\n                    this.props.updateToken(data.sessionToken);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error.message)\r\n            })\r\n    };\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>Log In</h1>\r\n                <Form onSubmit={this.handleSubmit}>\r\n                    <FormGroup>\r\n                        \r\n                        <Label\r\n                            className=\"form-label\"\r\n                            htmlFor=\"email\">Email</Label>\r\n                        <Input\r\n                            name=\"email\"\r\n                            placeholder=\"yeschef@email.com\"\r\n                            type=\"email\"\r\n                            aria-required=\"true\"\r\n                            required={true}\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => this.setState({ email: e.target.value}) }\r\n                            value={this.state.email}     \r\n                    />\r\n                    </FormGroup>\r\n                    \r\n                    <FormGroup>\r\n                        <Label\r\n                            className=\"form-label\"\r\n                            htmlFor=\"password\">Password</Label>\r\n                        <Input\r\n                            name=\"password\"\r\n                            placeholder=\"the secret sauce\"\r\n                            type=\"text\"\r\n                            aria-required=\"true\"\r\n                            required={true}\r\n                            minLength={6}\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => this.setState({ password: e.target.value }) }\r\n                            value={this.state.password}\r\n                        />\r\n                    </FormGroup>\r\n                <br>\r\n                </br>\r\n                    <Button\r\n                        className=\"btn-auth\"\r\n                        type=\"submit\"\r\n                        onClick={this.handleSubmit}\r\n                    > Shaken or Stirred\r\n                    </Button>\r\n                </Form>\r\n                <br>\r\n                </br>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport Signup from \"./Signup\";\r\nimport Login from \"./Login\";\r\n\r\nconst ValidateSession = (props :any) => {\r\n    return (\r\n        <div className=\"container\">\r\n        <Container>\r\n            <Row>\r\n                <Col md='7'>\r\n                    <Signup\r\n                        //grabbing token method from App.tsx\r\n                        updateToken={props.updateToken}\r\n                    />\r\n                </Col>\r\n                <Col md='7'>\r\n                    <Login\r\n                        //grabbing token method from app.tsx\r\n                        updateToken={props.updateToken}\r\n                    />\r\n                </Col>\r\n                </Row>\r\n            </Container>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default ValidateSession;\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport ValidateSession from '../src/components/auth/ValidateSession';\n// import CocktailsGet from './components/cocktails/CocktailsGet';\nimport Login from './components/auth/Login';\nimport Signup from './components/auth/Signup';\n\ntype AppState = {\n  sessionToken: string;\n}\n\nclass App extends React.Component<{}, AppState>{\n  constructor() {\n    super({});\n    this.state = {\n      sessionToken: \"\"\n    }\n  };\n\n  componentDidMount() {\n    this.setToken();\n  }\n\n  /**\n   * sets value of token to the value of newToken the token within localStorage.\n   */\n  setToken(): void {\n    this.setState({\n      sessionToken: localStorage.getItem(\"token\") || \"\"\n    });\n  }\n\n  /**\n   * Sets value of token to the value of newToken\n   * if token does not exist, creates a new key value pair.\n   * @param newToken string\n   */\n  updateToken(newToken: string): void {\n    localStorage.setItem(\"token\", newToken);\n    this.setToken();\n  }\n\n  /**\n   * Clears local storage and sets the token to an empty string.\n   */\n  clearToken(): void {\n    localStorage.removeItem(\"token\");\n    this.updateToken(\"\");\n  }\n\n  /**\n   * Returns either the `<CocktailsGet />` or the `<ValidateSession />` component based on if the session is valid.\n   */\n  userOnlyViews() {\n    return this.state.sessionToken === localStorage.getItem(\"token\") ?\n        // if the sessionToken and token in local storage match then we can access user-protected route\n        console.log(`Protected routes`)\n        // ? <CocktailsGet {...{\n        //     editCocktailsList: () => {},\n        //     deleteCocktailsList: () => {},\n        //     token: this.state.sessionToken,\n        //     updateOn: this.updateToken\n        //   } } />\n\n        // otherwise if the tokens don't match then we push them back to the validate session page \n        : <ValidateSession {... { token: this.state.sessionToken } } />\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            Testing. This is the header\n          </p>\n        </header>\n        <ValidateSession />\n      </div>\n    );\n  }\n}\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}